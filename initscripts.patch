diff -uarN a/debian/control b/debian/control
--- a/debian/control	2017-08-03 21:05:34.878723342 +0200
+++ b/debian/control	2017-08-03 21:14:48.022727723 +0200
@@ -64,31 +64,6 @@
  ifupdown (<< 0.7.46),
 # /bin/mountpoint was moved to util-linux
  util-linux (<< 2.26.2-4~),
-# Packages using /lib/init/rw which must transition to /run.
-# These breaks may be removed after wheezy is released.
- aide (<< 0.15.1-5),
- atm-tools (<< 1:2.5.1-1.3),
- console-common (<< 0.7.86),
- console-setup (<< 1.74),
- cruft (<< 0.9.16),
- eepc-acpi-scripts (<< 1.1.12),
- fcheck (<< 2.7.59-16),
- hostapd (<< 1:0.7.3-3),
- live-build (<< 3.0~a26-1),
- ltsp-client-core (<< 5.2.16-1),
- mdadm (<< 3.2.2-1),
- nbd-client (<< 1:2.9.23-1),
- nfs-common (<< 1:1.2.5-3),
- portmap (<< 6.0.0-2),
- readahead-fedora (<< 2:1.5.6-3),
- resolvconf (<< 1.49),
- rpcbind (<< 0.2.0-7),
- rsyslog (<< 5.8.2-2),
- splashy (<< 0.3.13-5.1+b1),
- sysklogd (<< 1.5-6.2),
- wpasupplicant (<< 0.7.3-4),
- xymon (<< 4.3.0~beta2.dfsg-9),
- selinux-policy-default (<= 2:0.2.20100524-9),
 # Packages relying on a writable /etc/mtab which need fixing
 # before they can work with /proc/mounts and utab with libmount.
  libpam-mount (<< 2.13-1),
diff -uarN a/debian/NOTES b/debian/NOTES
--- a/debian/NOTES	2017-08-03 21:05:34.878723342 +0200
+++ b/debian/NOTES	2017-08-03 21:12:16.546726523 +0200
@@ -21,10 +21,7 @@
 
 Stuff to send upstream
 ----------------------
-debian/patches/fix-minor-warnings should be applied upstream.
-So should a lot of the other patches.
-
-src/Makefile should not set CC.
+Some patches should probably be upstreamed.
 
 set -e
 ------
@@ -38,9 +35,6 @@
   + set to "/sbin:/bin" in /etc/init.d/rc and in scripts that run prior
     to mountnfs.sh; otherwise...
   + set to "/usr/sbin:/usr/bin:/sbin:/bin".
-  + Add "/lib/init" to beginning of PATH if readlink command or domount
-    function used.  This will disappear once coreutils 5.94 makes it
-    into testing, and we Depend on that.
 * Question: Should we include /usr/local/sbin and /usr/local/bin too?
   I don't see this question addressed in Policy.  Ref: #227540
 
diff -uarN a/debian/src/initscripts/etc/init.d/rmnologin b/debian/src/initscripts/etc/init.d/rmnologin
--- a/debian/src/initscripts/etc/init.d/rmnologin	1970-01-01 01:00:00.000000000 +0100
+++ b/debian/src/initscripts/etc/init.d/rmnologin	2017-08-03 21:18:07.562729304 +0200
@@ -0,0 +1,59 @@
+#! /bin/sh
+### BEGIN INIT INFO
+# Provides:          rmnologin
+# Required-Start:    $remote_fs $all
+# Required-Stop: 
+# Default-Start:     2 3 4 5
+# Default-Stop:
+# Short-Description: Remove /run/nologin at boot
+# Description:       This script removes the /run/nologin file as the
+#                    last step in the boot process, if DELAYLOGIN=yes.
+#                    If DELAYLOGIN=no, /run/nologin was not created by
+#                    bootmisc earlier in the boot process.
+### END INIT INFO
+
+PATH=/sbin:/bin
+[ "$DELAYLOGIN" ] || DELAYLOGIN=yes
+. /lib/init/vars.sh
+
+do_start () {
+	#
+	# If login delaying is enabled then remove the flag file
+	#
+	case "$DELAYLOGIN" in
+	  Y*|y*)
+		rm -f /run/nologin
+		;;
+	esac
+}
+
+do_status () {
+	if [ ! -f /run/nologin ] ; then
+		return 0
+	else
+		return 4
+	fi
+}
+
+case "$1" in
+  start)
+	do_start
+	;;
+  restart|reload|force-reload)
+	echo "Error: argument '$1' not supported" >&2
+	exit 3
+	;;
+  stop)
+	# No-op
+	;;
+  status)
+	do_status
+	exit $?
+	;;
+  *)
+	echo "Usage: $0 start|stop" >&2
+	exit 3
+	;;
+esac
+
+:
diff -uarN a/debian/src/initscripts/lib/init/bootclean.sh b/debian/src/initscripts/lib/init/bootclean.sh
--- a/debian/src/initscripts/lib/init/bootclean.sh	1970-01-01 01:00:00.000000000 +0100
+++ b/debian/src/initscripts/lib/init/bootclean.sh	2017-08-03 21:17:18.550728916 +0200
@@ -0,0 +1,181 @@
+# bootclean
+#
+# Clean /tmp, /run and /var/lock if not mounted as tmpfs
+#
+# DO NOT RUN AFTER S:55bootmisc.sh and do not run this script directly
+# in runlevel S. Instead write an initscript to call it.
+#
+
+. /lib/init/vars.sh
+. /lib/lsb/init-functions
+
+# Should be called outside verbose message block
+mkflagfile()
+{
+	# Prevent symlink attack  (See #264234.)
+	[ -L "$1" ] && log_warning_msg "bootclean: Deleting symbolic link '$1'."
+	rm -f "$1" || { log_failure_msg "bootclean: Failure deleting '$1'." ; return 1 ; }
+	# No user processes should be running, so no one should be
+	# able to introduce a symlink here.  As an extra precaution,
+	# set noclobber.
+	set -o noclobber
+	:> "$1" || { log_failure_msg "bootclean: Failure creating '$1'." ; return 1 ; }
+	return 0
+}
+
+checkflagfile()
+{
+	if [ -f $1/.clean ]
+	then
+		which stat >/dev/null 2>&1 && cleanuid="$(stat -c %u $1/.clean)"
+		# Poor's man stat %u, since stat (and /usr) might not
+		# be available in some bootup stages
+		[ "$cleanuid" ] || cleanuid="$(find $1/.clean -printf %U)"
+		[ "$cleanuid" ] || { log_failure_msg "bootclean: Could not stat '$1/.clean'." ; return 1 ; }
+		if [ "$cleanuid" -ne 0 ]
+		then
+			rm -f $1/.clean || { log_failure_msg "bootclean: Could not delete '$1/.clean'." ; return 1 ; }
+		fi
+	fi
+	return 0
+}
+
+	report_err()
+	{
+		dir="$1"
+		if [ "$VERBOSE" = no ]
+		then
+			log_failure_msg "bootclean: Failure cleaning ${dir}."
+		else
+			log_action_end_msg 1 "bootclean: Failure cleaning ${dir}"
+		fi
+	}
+
+clean_tmp() {
+	# Does not exist
+	[ -d /tmp ] || return 1
+	# tmpfs does not require cleaning
+	[ -f /tmp/.tmpfs ] && return 0
+	# Can clean?
+	checkflagfile /tmp || return 0
+	# Already cleaned
+	[ -f /tmp/.clean ] && return 0
+	# Can't clean yet?
+	which find >/dev/null 2>&1 || return 1
+
+	cd /tmp || { log_failure_msg "bootclean: Could not cd to /tmp." ; return 1 ; }
+
+	#
+	# Only clean out /tmp if it is world-writable. This ensures
+	# it really is a/the temp directory we're cleaning.
+	#
+	[ "$(find . -maxdepth 0 -perm -002)" = "." ] || return 0
+
+	if [ ! "$TMPTIME" ]
+	then
+		log_warning_msg "Using default TMPTIME 0."
+		TMPTIME=0
+	fi
+
+	[ "$VERBOSE" = no ] || log_action_begin_msg "Cleaning /tmp"
+
+	#
+	# Remove regardless of TMPTIME setting
+	#
+	rm -f .X*-lock
+
+	#
+	# Don't clean remaining files if TMPTIME is negative or 'infinite'
+	#
+	case "$TMPTIME" in
+	  -*|infinite|infinity)
+		[ "$VERBOSE" = no ] || log_action_end_msg 0 "skipped"
+		return 0
+		;;
+	esac
+
+	#
+	# Wipe /tmp, excluding system files, but including lost+found
+	#
+	# If TMPTIME is set to 0, we do not use any ctime expression
+	# at all, so we can also delete files with timestamps
+	# in the future!
+	#
+	if [ "$TMPTIME" = 0 ]
+	then
+		TEXPR=""
+		DEXPR=""
+	else
+		TEXPR="-mtime +$TMPTIME -ctime +$TMPTIME -atime +$TMPTIME"
+		DEXPR="-mtime +$TMPTIME -ctime +$TMPTIME"
+	fi
+
+	EXCEPT='! -name .
+		! ( -path ./lost+found -uid 0 )
+		! ( -path ./quota.user -uid 0 )
+		! ( -path ./aquota.user -uid 0 )
+		! ( -path ./quota.group -uid 0 )
+		! ( -path ./aquota.group -uid 0 )
+		! ( -path ./.journal -uid 0 )
+		! ( -path ./.clean -uid 0 )
+		! ( -path './...security*' -uid 0 )'
+
+	mkflagfile /tmp/.clean || return 1
+
+	#
+	# First remove all old files...
+	#
+	find . -depth -xdev $TEXPR $EXCEPT ! -type d -delete \
+		|| { report_err "/tmp"; return 1 ; }
+
+	#
+	# ...and then all empty directories
+	#
+	find . -depth -xdev $DEXPR $EXCEPT -type d -empty -delete \
+		|| { report_err "/tmp"; return 1 ; }
+
+	[ "$VERBOSE" = no ] || log_action_end_msg 0
+	log_progress_msg "/tmp"
+	return 0
+}
+
+clean() {
+	dir="$1"
+	findopts="$2"
+
+	# Does not exist
+	[ -d "$dir" ] || return 1
+	# tmpfs does not require cleaning
+	[ -f "$dir/.tmpfs" ] && return 0
+	# Can clean?
+	checkflagfile "$dir" || return 0
+	# Already cleaned
+	[ -f "${dir}/.clean" ] && return 0
+	# Can't clean yet?
+	which find >/dev/null 2>&1 || return 1
+
+	cd "$dir" || { log_action_end_msg 1 "bootclean: Could not cd to ${dir}." ; return 1 ; }
+
+	[ "$VERBOSE" = no ] || log_action_begin_msg "Cleaning $dir"
+
+	find . $findopts -delete \
+		|| { report_err "$dir"; return 1 ; }
+	[ "$VERBOSE" = no ] || log_action_end_msg 0
+	mkflagfile "${dir}/.clean" || return 1
+	log_progress_msg "$dir"
+	return 0
+}
+
+clean_all()
+{
+	which find >/dev/null 2>&1 || return 0
+	log_begin_msg "Cleaning up temporary files..."
+	ES=0
+	clean_tmp || ES=1
+	clean /run "! -xtype d ! -name utmp ! -name innd.pid" || ES=1
+	clean /run/lock "! -type d" || ES=1
+	clean /run/shm "! -type d" || ES=1
+	log_end_msg $ES
+	return $ES
+}
+
diff -uarN a/debian/src/initscripts/lib/init/mount-functions.sh b/debian/src/initscripts/lib/init/mount-functions.sh
--- a/debian/src/initscripts/lib/init/mount-functions.sh	1970-01-01 01:00:00.000000000 +0100
+++ b/debian/src/initscripts/lib/init/mount-functions.sh	2017-08-03 21:17:18.550728916 +0200
@@ -0,0 +1,708 @@
+#
+# Functions used by several mount* scripts in initscripts package
+#
+# Sourcer must source /lib/lsb/init-functions.sh
+
+# List available fstab files, including any files in /etc/fstab.d.
+# This looks ugly, but we can't use find and it's safer than globbing.
+fstab_files()
+{
+    echo /etc/fstab
+    if [ -d /etc/fstab.d ]; then
+        ls -1 /etc/fstab.d | grep '\.fstab$' | sed -e 's;^;/etc/fstab.d/;'
+    fi
+}
+
+# $1: directory
+is_empty_dir() {
+	for FILE in $1/* $1/.*
+	do
+		case "$FILE" in
+		  "$1/.*") return 0 ;;
+		  "$1/*"|"$1/."|"$1/..") continue ;;
+		  *) return 1 ;;
+		esac
+	done
+	return 0
+}
+
+
+selinux_enabled () {
+	which selinuxenabled >/dev/null 2>&1 && selinuxenabled
+}
+
+# Read /etc/fstab, looking for:
+# 1) The root filesystem, resolving LABEL=*|UUID=* entries to the
+#	device node,
+# 2) Swap that is on a md device or a file that may be on a md
+#	device,
+_read_fstab () {
+	echo "fstabroot=/dev/root"
+	echo "rootdev=none"
+	echo "roottype=none"
+	echo "rootopts=defaults"
+	echo "rootmode=rw"
+	echo "rootcheck=no"
+	echo "swap_on_lv=no"
+	echo "swap_on_file=no"
+
+	fstab_files | while read file; do
+		if [ -f "$file" ]; then
+			while read DEV MTPT FSTYPE OPTS DUMP PASS JUNK; do
+				case "$DEV" in
+				  ""|\#*)
+					continue;
+					;;
+				  /dev/mapper/*)
+					[ "$FSTYPE" = "swap" ] && echo swap_on_lv=yes
+					;;
+				  /dev/*)
+					;;
+				  LABEL=*|UUID=*)
+					if [ "$MTPT" = "/" ] && [ -x /sbin/findfs ]
+					then
+						DEV="$(findfs "$DEV")"
+					fi
+					;;
+				  /*)
+					[ "$FSTYPE" = "swap" ] && echo swap_on_file=yes
+					;;
+				  *)
+					;;
+				esac
+				[ "$MTPT" != "/" ] && continue
+				echo rootdev=\"$DEV\"
+				echo fstabroot=\"$DEV\"
+				echo rootopts=\"$OPTS\"
+				echo roottype=\"$FSTYPE\"
+				( [ "$PASS" != 0 ] && [ "$PASS" != "" ]   ) && echo rootcheck=yes
+				( [ "$FSTYPE" = "nfs" ] || [ "$FSTYPE" = "nfs4" ] ) && echo rootcheck=no
+				case "$OPTS" in
+				  ro|ro,*|*,ro|*,ro,*)
+					echo rootmode=ro
+					;;
+				esac
+			done < "$file"
+		fi
+	done
+}
+
+# Read /etc/fstab, looking for:
+# 1) The root filesystem, resolving LABEL=*|UUID=* entries to the
+#	device node,
+# 2) Swap that is on a md device or a file that may be on a md
+#	device,
+
+read_fstab () {
+	eval "$(_read_fstab)"
+}
+
+# Find a specific fstab entry
+# $1=mountpoint
+# $2=fstype (optional)
+_read_fstab_entry () {
+	# Not found by default.
+	echo "MNT_FSNAME="
+	echo "MNT_DIR="
+	echo "MNT_TYPE="
+	echo "MNT_OPTS="
+	echo "MNT_FREQ="
+	echo "MNT_PASS="
+
+	fstab_files | while read file; do
+		if [ -f "$file" ]; then
+			while read MNT_FSNAME MNT_DIR MNT_TYPE MNT_OPTS MNT_FREQ MNT_PASS MNT_JUNK; do
+				case "$MNT_FSNAME" in
+				  ""|\#*)
+					continue;
+					;;
+				esac
+				if [ "$MNT_DIR" = "$1" ]; then
+					if [ -n "$2" ]; then
+						[ "$MNT_TYPE" = "$2" ] || continue;
+					fi
+	                                echo "MNT_FSNAME=$MNT_FSNAME"
+	                                echo "MNT_DIR=$MNT_DIR"
+	                                echo "MNT_TYPE=$MNT_TYPE"
+	                                echo "MNT_OPTS=$MNT_OPTS"
+	                                echo "MNT_FREQ=$MNT_FREQ"
+	                                echo "MNT_PASS=$MNT_PASS"
+					break 2
+				fi
+				MNT_DIR=""
+			done < "$file"
+		fi
+	done
+}
+
+# Find a specific fstab entry
+# $1=mountpoint
+# $2=fstype (optional)
+# returns 0 on success, 1 on failure (not found or no fstab)
+read_fstab_entry () {
+	eval "$(_read_fstab_entry "$1" "$2")"
+
+	# Not found by default.
+	found=1
+	if [ "$1" = "$MNT_DIR" ]; then
+		found=0
+	fi
+
+	return $found
+}
+
+# Mount kernel and device file systems.
+# $1: mount mode (mount, remount)
+# $2: file system type
+# $3: alternative file system type (or empty string if none)
+# $4: mount point
+# $5: mount device name
+# $6... : extra mount program options
+domount () {
+	MOUNTMODE="$1"
+	PRIFSTYPE="$2"
+	ALTFSTYPE="$3"
+	MTPT="$4"
+	DEVNAME="$5"
+	CALLER_OPTS="$6"
+
+	KERNEL="$(uname -s)"
+	# Figure out filesystem type from primary and alternative type
+	FSTYPE=
+	# Filesystem-specific mount options
+	FS_OPTS=
+	# Mount options from fstab
+	FSTAB_OPTS=
+
+	if [ "$MOUNTMODE" = remount ] ; then
+		case "$KERNEL" in
+			*FreeBSD)
+				case "$PRIFSTYPE" in
+					proc|tmpfs|sysfs)
+						# can't be remounted
+						return 0
+					;;
+				esac
+			;;
+		esac
+	fi
+
+	if [ "$PRIFSTYPE" = proc ]; then
+		case "$KERNEL" in
+			Linux)     FSTYPE=proc ;;
+			GNU)       FSTYPE=proc; FS_OPTS="-ocompatible" ;;
+			*FreeBSD)  FSTYPE=linprocfs ;;
+			*)         FSTYPE=procfs ;;
+		esac
+	elif [ "$PRIFSTYPE" = bind ]; then
+		case "$KERNEL" in
+			Linux)     FSTYPE="$DEVNAME"; FS_OPTS="-obind" ;;
+			*FreeBSD)  FSTYPE=nullfs ;;
+			GNU)       FSTYPE=firmlink ;;
+			*)         FSTYPE=none ;;
+		esac
+	elif [ "$PRIFSTYPE" = tmpfs ]; then
+		# always accept tmpfs, to mount /run before /proc
+		case "$KERNEL" in
+			*)	FSTYPE=$PRIFSTYPE ;;
+		esac
+	elif grep -E -qs "$PRIFSTYPE\$" /proc/filesystems; then
+		FSTYPE=$PRIFSTYPE
+	elif grep -E -qs "$ALTFSTYPE\$" /proc/filesystems; then
+		FSTYPE=$ALTFSTYPE
+	fi
+
+	# Filesystem not supported by kernel
+	if [ ! "$FSTYPE" ]; then
+		if [ "$ALTFSTYPE" ]; then
+			log_warning_msg "Filesystem types '$PRIFSTYPE' and '$ALTFSTYPE' are not supported. Skipping mount."
+		else
+			log_warning_msg "Filesystem type '$PRIFSTYPE' is not supported. Skipping mount."
+		fi
+		return
+	fi
+
+	# We give file system type as device name if not specified as
+	# an argument
+	if [ -z "$DEVNAME" ] ; then
+	    DEVNAME=$FSTYPE
+	fi
+
+	# Get the mount options from /etc/fstab
+	if read_fstab_entry "$MTPT" "$FSTYPE"; then
+		case "$MNT_OPTS" in
+			noauto|*,noauto|noauto,*|*,noauto,*)
+				return
+				;;
+			?*)
+				FSTAB_OPTS="-o$MNT_OPTS"
+				;;
+		esac
+	fi
+
+	if [ ! -d "$MTPT" ]
+	then
+		log_warning_msg "Mount point '$MTPT' does not exist. Skipping mount."
+		return
+	fi
+
+	if [ "$MOUNTMODE" = "mount_noupdate" ]; then
+		MOUNTFLAGS="-n"
+		MOUNTMODE=mount
+	fi
+	if [ "$MOUNTMODE" = "remount_noupdate" ]; then
+		MOUNTFLAGS="-n"
+		MOUNTMODE=remount
+	fi
+
+	case "$MOUNTMODE" in
+		mount)
+			if mountpoint -q "$MTPT"; then
+			    # Already mounted, probably moved from the
+			    # initramfs, so remount with the
+			    # user-specified mount options later on.
+			    :
+			else
+				if [ "$VERBOSE" != "no" ]; then
+					is_empty_dir "$MTPT" >/dev/null 2>&1 || log_warning_msg "Files under mount point '$MTPT' will be hidden."
+				fi
+				mount $MOUNTFLAGS -t $FSTYPE $CALLER_OPTS $FSTAB_OPTS $FS_OPTS $DEVNAME $MTPT
+				if [ "$FSTYPE" = "tmpfs" -a -x /sbin/restorecon ]; then
+					/sbin/restorecon $MTPT
+				fi
+			fi
+			;;
+		remount)
+			if mountpoint -q "$MTPT"; then
+				# Remount with user-specified mount options
+				mount $MOUNTFLAGS -oremount $CALLER_OPTS $FSTAB_OPTS $MTPT
+			fi
+			;;
+	esac
+}
+
+#
+# Preserve /var/run and /var/lock mountpoints
+#
+pre_mountall ()
+{
+    :
+}
+
+# If the device/inode are the same, a bind mount already exists or the
+# transition is complete, so set up is not required.  Otherwise bind
+# mount $SRC on $DEST.
+bind_mount ()
+{
+	SRC=$1
+	DEST=$2
+
+	FSTYPE=""
+	OPTS=""
+
+	ssrc="$(/usr/bin/stat -L --format="%d %i" "$SRC" 2>/dev/null || :)"
+	sdest="$(/usr/bin/stat -L --format="%d %i" "$DEST" 2>/dev/null || :)"
+
+	case "$(uname -s)" in
+		Linux)     FSTYPE=$SRC; OPTS="-orw -obind" ;;
+		*FreeBSD)  FSTYPE=nullfs; OPTS="-orw" ;;
+		GNU)       FSTYPE=firmlink ;;
+		*)         FSTYPE=none ;;
+	esac
+
+	# Bind mount $SRC on $DEST
+	if [ -n "$ssrc" ] && [ "$ssrc" != "$sdest" ]; then
+		[ -d "$DEST" ] || mkdir "$DEST"
+		[ -x /sbin/restorecon ] && /sbin/restorecon "$DEST"
+		if mount -t $FSTYPE "$SRC" "$DEST" $OPTS ; then
+			echo "Please reboot to complete migration to tmpfs-based /run" > "${DEST}/.run-transition"
+			return 0
+		fi
+		return 1
+	fi
+
+	return 0
+}
+
+#
+# Migrate a directory to /run and create compatibility symlink or bind
+# mount.
+#
+run_migrate ()
+{
+	OLD=$1
+	RUN=$2
+
+	KERNEL="$(uname -s)"
+	OPTS=""
+	case "$KERNEL" in
+		Linux)     FSTYPE=none OPTS="-orw -obind";;
+		*FreeBSD)  FSTYPE=nullfs OPTS="-orw" ;;
+		GNU)       FSTYPE=firmlink ;;
+		*)         FSTYPE=none ;;
+	esac
+
+	# Create absolute symlink if not already present.  This is to
+	# upgrade from older versions which created relative links,
+	# which are not permitted in policy between top-level
+	# directories.
+	if [ -L "$OLD" ] && [ "$(readlink "$OLD")" != "$RUN" ]; then
+		rm -f "$OLD"
+		ln -fs "$RUN" "$OLD"
+		[ -x /sbin/restorecon ] && /sbin/restorecon "$OLD"
+	fi
+
+	# If both directories are the same, we don't need to do
+	# anything further.
+	sold="$(/usr/bin/stat -L --format="%d %i" "$OLD" 2>/dev/null || :)"
+	srun="$(/usr/bin/stat -L --format="%d %i" "$RUN" 2>/dev/null || :)"
+	if [ -n "$sold" ] && [ "$sold" = "$srun" ]; then
+		return 0
+	fi
+
+	# Try to remove if a directory.  Note this is safe because the
+	# system is not yet fully up, and nothing is allowed to use
+	# them yet.  If the user explicitly mounted a filesystem here,
+	# it will be cleaned out, but this would happen later on when
+	# bootclean runs in any case.
+	if [ ! -L "$OLD" ] && [ -d "$OLD" ] ; then
+		rm -fr "$OLD" 2>/dev/null || true
+	fi
+
+	# If removal failed (directory still exists), set up bind mount.
+	if [ ! -L "$OLD" ] && [ -d "$OLD" ] ; then
+		if [ "$OLD" != "/tmp" ]; then
+			log_warning_msg "Filesystem mounted on $OLD; setting up compatibility bind mount."
+			log_warning_msg "Please remove this mount from /etc/fstab; it is no longer needed, and it is preventing completion of the transition to $RUN."
+		fi
+		mount -t $FSTYPE "$RUN" "$OLD" $OPTS
+	else
+		# Create symlink if not already present.
+		if [ -L "$OLD" ] && [ "$(readlink "$OLD")" != "$RUN" ]; then
+			:
+		else
+			rm -f "$OLD"
+			ln -fs "$RUN" "$OLD"
+			[ -x /sbin/restorecon ] && /sbin/restorecon "$OLD"
+		fi
+	fi
+
+	return 0
+}
+
+#
+# Migrate /etc/mtab to a compatibility symlink
+#
+mtab_migrate ()
+{
+	# Don't symlink if /proc/mounts does not exist.
+	if [ ! -r "/proc/mounts" ]; then
+		return 1
+	fi
+
+	# Create symlink if not already present.
+	if [ -L "/etc/mtab" ] && [ "$(readlink "/etc/mtab")" = "/proc/mounts" ]; then
+		:
+	else
+		log_warning_msg "Creating compatibility symlink from /etc/mtab to /proc/mounts."
+
+		rm -f "/etc/mtab" || return 1
+		ln -fs "/proc/mounts" "/etc/mtab" || return 1
+		[ -x /sbin/restorecon ] && /sbin/restorecon "/etc/mtab"
+	fi
+
+	return 0
+}
+
+#
+# For compatibility, create /var/run and /var/lock symlinks to /run
+# and /run/lock, respectively.
+#
+post_mountall ()
+{
+	# /var/run and /var/lock are now /run and /run/lock,
+	# respectively.  Cope with filesystems being deliberately
+	# mounted on /var/run and /var/lock.  We will create bind
+	# mounts from /run and /run/lock to /var/run and /var/lock if
+	# we can't remove the /var/run and /var/lock directories, or
+	# else simply create symlinks.  For example, in the case that
+	# the user has explicitly mounted filesystems on /var/run or
+	# /var/lock, we bind mount over the top of them.  Where no
+	# filesystems are mounted, we replace the directory with a
+	# symlink where possible.
+
+	# Cater for systems which have a symlink from /run to /var/run
+	# for whatever reason.  Remove the symlink and replace with a
+	# directory.  The migration logic will then take care of the
+	# rest.  Note that it will take a second boot to fully
+	# migrate; it should only ever be needed on broken systems.
+	RAMSHM_ON_DEV_SHM="no"
+	if read_fstab_entry "/dev/shm"; then
+	    RAMSHM_ON_DEV_SHM="yes"
+	fi
+	if read_fstab_entry "/run/shm"; then
+	    RAMSHM_ON_DEV_SHM="no"
+	fi
+
+	if [ -L /run ]; then
+		if [ "$(readlink /run)" = "/var/run" ]; then
+			rm -f /run
+			mkdir /run
+		fi
+		if bind_mount /var/run /run; then
+		    bind_mount /var/lock /run/lock
+		    if [ yes = "$RAMSHM_ON_DEV_SHM" ]; then
+			run_migrate /run/shm /dev/shm
+		    else
+			run_migrate /dev/shm /run/shm
+		    fi
+		fi
+	else
+	    run_migrate /var/run /run
+	    run_migrate /var/lock /run/lock
+	    if [ yes = "$RAMSHM_ON_DEV_SHM" ]; then
+		run_migrate /run/shm /dev/shm
+	    else
+		run_migrate /dev/shm /run/shm
+	    fi
+	fi
+}
+
+# Mount /run
+mount_run ()
+{
+	MNTMODE="$1"
+	KERNEL="$(uname -s)"
+
+	if [ "$MNTMODE" = remount ] ; then
+		case "$KERNEL" in
+			*FreeBSD)
+				# tmpfs can't be remounted
+				return 0
+			;;
+		esac
+	fi
+
+	# Needed to determine if root is being mounted read-only.
+	read_fstab
+
+	#
+	# Get some writable area available before the root is checked
+	# and remounted.  Note that /run may be handed over from the
+	# initramfs.
+	#
+
+	# If /run/shm is separately mounted, /run can be safely mounted noexec.
+	RUNEXEC=
+	if [ yes = "$RAMSHM" ] || read_fstab_entry /run/shm tmpfs; then
+	    RUNEXEC=',noexec'
+	fi
+	# TODO: Add -onodev once checkroot no longer creates a device node.
+	domount "$MNTMODE" tmpfs shmfs /run tmpfs "-onosuid$RUNEXEC$RUN_OPT"
+	[ -x /sbin/restorecon ] && /sbin/restorecon -r /run
+
+	# Make pidfile omit directory for sendsigs
+	[ -d /run/sendsigs.omit.d ] || mkdir --mode=755 /run/sendsigs.omit.d/
+
+	# Make sure we don't get cleaned
+	touch /run/.tmpfs
+}
+
+# Mount /run/lock
+mount_lock ()
+{
+	MNTMODE="$1"
+	KERNEL="$(uname -s)"
+
+	if [ "$MNTMODE" = remount ] ; then
+		case "$KERNEL" in
+			*FreeBSD)
+				# tmpfs can't be remounted
+				return 0
+			;;
+		esac
+	fi
+
+	# Make lock directory as the replacement for /var/lock
+	[ -d /run/lock ] || mkdir --mode=755 /run/lock
+	[ -x /sbin/restorecon ] && /sbin/restorecon /run/lock
+
+	# Now check if there's an entry in /etc/fstab.  If there is,
+	# it overrides the existing RAMLOCK setting.
+	if read_fstab_entry /run/lock; then
+	    if [ "$MNT_TYPE" = "tmpfs" ] ; then
+		RAMLOCK="yes"
+	    else
+		RAMLOCK="no"
+	    fi
+	fi
+
+	NODEV="nodev,"
+	case "$KERNEL" in
+		*FreeBSD|GNU)  NODEV="" ;;
+	esac
+
+	# Mount /run/lock as tmpfs if enabled.  This prevents user DoS
+	# of /run by filling /run/lock at the expense of using an
+	# additional tmpfs.
+	if [ yes = "$RAMLOCK" ]; then
+		domount "$MNTMODE" tmpfs shmfs /run/lock tmpfs "-o${NODEV}noexec,nosuid$LOCK_OPT"
+		# Make sure we don't get cleaned
+		touch /run/lock/.tmpfs
+	else
+		chmod "$LOCK_MODE" /run/lock
+	fi
+}
+
+# Mount /run/shm
+mount_shm ()
+{
+	MNTMODE="$1"
+
+	RAMSHM_ON_DEV_SHM="no"
+	SHMDIR="/run/shm"
+	if read_fstab_entry "/dev/shm"; then
+		if [ "$MNTMODE" = "mount_noupdate" ]; then
+			log_warning_msg "Warning: fstab entry for /dev/shm; should probably be for /run/shm unless working around a bug in the Oracle database"
+		fi
+		SHMDIR="/dev/shm"
+		RAMSHM_ON_DEV_SHM="yes"
+	fi
+	if read_fstab_entry "/run/shm"; then
+		if [ "$MNTMODE" = "mount_noupdate" ] && [ "$RAMSHM_ON_DEV_SHM" = "yes" ]; then
+			log_warning_msg "Warning: fstab entries for both /dev/shm and /run/shm found; only /run/shm will be used"
+		fi
+
+		SHMDIR="/run/shm"
+		RAMSHM_ON_DEV_SHM="no"
+	fi
+
+	if [ ! -d "$SHMDIR" ]
+	then
+		mkdir --mode=755 "$SHMDIR"
+		[ -x /sbin/restorecon ] && /sbin/restorecon "$SHMDIR"
+	fi
+
+	# Now check if there's an entry in /etc/fstab.  If there is,
+	# it overrides the existing RAMSHM setting.
+	if read_fstab_entry "$SHMDIR"; then
+		if [ "$MNT_TYPE" = "tmpfs" ] ; then
+			RAMSHM="yes"
+		else
+			RAMSHM="no"
+		fi
+	fi
+
+	KERNEL="$(uname -s)"
+	NODEV="nodev,"
+	case "$KERNEL" in
+		*FreeBSD|GNU)  NODEV="" ;;
+	esac
+
+	if [ yes = "$RAMSHM" ]; then
+		domount "$MNTMODE" tmpfs shmfs "$SHMDIR" tmpfs "-onosuid,${NODEV}noexec$SHM_OPT"
+		# Make sure we don't get cleaned
+		touch "$SHMDIR"/.tmpfs
+	else
+		chmod "$SHM_MODE" "$SHMDIR"
+	fi
+
+	# Migrate early, so /dev/shm is available from the start
+	if [ "$MNTMODE" = mount_noupdate ] || [ "$MNTMODE" = mount ]; then
+		if [ yes = "$RAMSHM_ON_DEV_SHM" ]; then
+			run_migrate /run/shm /dev/shm
+		else
+			run_migrate /dev/shm /run/shm
+		fi
+	fi
+}
+
+#
+# Mount /tmp
+#
+mount_tmp ()
+{
+	MNTMODE="$1"
+
+	# If /tmp is a symlink, make sure the linked-to directory exists.
+	if [ -L /tmp ] && [ ! -d /tmp ]; then
+		TMPPATH="$(readlink /tmp)"
+		mkdir -p --mode=755 "$TMPPATH"
+		[ -x /sbin/restorecon ] && /sbin/restorecon "$TMPPATH"
+	fi
+
+	# Disable RAMTMP if there's 64MiB RAM or less.  May be
+	# re-enabled by overflow or read only root, below.
+	RAM_SIZE="$(ram_size)"
+	if [ -n "$RAM_SIZE" ] && [ "$((RAM_SIZE <= 65536))" = "1" ]; then
+		RAMTMP=no
+	fi
+
+	# If root is read only, default to mounting a tmpfs on /tmp,
+	# unless one is due to be mounted from fstab.
+	if [ "$RAMTMP" != "yes" ] && [ rw != "$rootmode" ]; then
+		# If there's an entry in fstab for /tmp (any
+		# filesystem type, not just tmpfs), then we don't need
+		# a tmpfs on /tmp by default.
+		if read_fstab_entry /tmp ; then
+			:
+		else
+			log_warning_msg "Root filesystem is read-only; mounting tmpfs on /tmp"
+			RAMTMP="yes"
+		fi
+	fi
+
+	if [ "$RAMTMP" != "yes" ] && need_overflow_tmp; then
+		# If there's an entry in fstab for /tmp (any
+		# filesystem type, not just tmpfs), then we don't need
+		# a tmpfs on /tmp by default.
+		if read_fstab_entry /tmp ; then
+			:
+		else
+			log_warning_msg "Root filesystem has insufficient free space; mounting tmpfs on /tmp"
+			RAMTMP="yes"
+		fi
+	fi
+
+	# Now check if there's an entry in /etc/fstab.  If there is,
+	# it overrides all the above settings.
+	if read_fstab_entry /tmp; then
+	    if [ "$MNT_TYPE" = "tmpfs" ] ; then
+		RAMTMP="yes"
+	    else
+		RAMTMP="no"
+	    fi
+	fi
+
+	KERNEL="$(uname -s)"
+	NODEV="nodev,"
+	case "$KERNEL" in
+		*FreeBSD|GNU)  NODEV="" ;;
+	esac
+
+	# Mount /tmp as tmpfs if enabled.
+	if [ yes = "$RAMTMP" ]; then
+		domount "$MNTMODE" tmpfs shmfs /tmp tmpfs "-o${NODEV}nosuid$TMP_OPT"
+		# Make sure we don't get cleaned
+		touch /tmp/.tmpfs
+	else
+		# When root is still read only, this will fail.
+		if [ mount_noupdate != "$MNTMODE" ] && [ rw = "$rootmode" ]; then
+			chmod "$TMP_MODE" /tmp
+		fi
+	fi
+}
+
+is_fastboot_active() {
+	if [ -f /fastboot ] ; then
+	    return 0
+	fi
+	for cmd in $(cat /proc/cmdline) ; do
+	    case "$cmd" in
+		fastboot)
+		    return 0
+		    ;;
+	    esac
+	done
+	return 1
+}
diff -uarN a/debian/src/initscripts/lib/init/swap-functions.sh b/debian/src/initscripts/lib/init/swap-functions.sh
--- a/debian/src/initscripts/lib/init/swap-functions.sh	1970-01-01 01:00:00.000000000 +0100
+++ b/debian/src/initscripts/lib/init/swap-functions.sh	2017-08-03 21:17:18.550728916 +0200
@@ -0,0 +1,28 @@
+#
+# Functions that assist in turning on swap.
+#
+
+# $1 is a string used to log the type of swap expected to be activated
+swaponagain() {
+	#
+	# Execute swapon command again to pick up any swap partitions
+	# that have shown up since the last swapon.
+	#
+	# Ignore 255 status due to swap already being enabled
+	#
+	if [ "$NOSWAP" = yes ]
+	then
+		[ "$VERBOSE" = no ] || log_warning_msg "Not activating swap as requested via bootoption noswap."
+	else
+		if [ "$VERBOSE" = no ]
+		then
+			log_action_begin_msg "Activating $1 swap"
+			swapon -a -e 2>/dev/null || :  # Stifle "Device or resource busy"
+			log_action_end_msg 0
+		else
+			log_daemon_msg "Will now activate $1 swap"
+			swapon -a -e -v
+			log_action_end_msg $?
+		fi
+	fi
+}
diff -uarN a/debian/src/initscripts/lib/init/tmpfs.sh b/debian/src/initscripts/lib/init/tmpfs.sh
--- a/debian/src/initscripts/lib/init/tmpfs.sh	1970-01-01 01:00:00.000000000 +0100
+++ b/debian/src/initscripts/lib/init/tmpfs.sh	2017-08-03 21:17:18.550728916 +0200
@@ -0,0 +1,133 @@
+#
+# Set tmpfs vars
+#
+
+
+# Get size of physical RAM in kiB
+ram_size ()
+{
+    [ -r /proc/meminfo ] && \
+	grep MemTotal /proc/meminfo | \
+	sed -e 's;.*[[:space:]]\([0-9][0-9]*\)[[:space:]]kB.*;\1;' || :
+}
+
+# Get size of swap space in kiB
+swap_size ()
+{
+    [ -r /proc/meminfo ] && \
+	grep SwapTotal /proc/meminfo | \
+	sed -e 's;.*[[:space:]]\([0-9][0-9]*\)[[:space:]]kB.*;\1;' || :
+}
+
+#
+# Get total VM size in kiB.  Prints nothing if no RAM and/or swap was
+# detectable.
+#
+vm_size ()
+{
+    RAM=$(ram_size)
+    SWAP=$(swap_size)
+
+    RAM="${RAM:=0}"
+    SWAP="${SWAP:=0}"
+
+    echo $((RAM + SWAP))
+    return 0;
+}
+
+#
+# Get size of tmpfs.  If the size is absolute or a percentage, return
+# that unchanged.  If suffixed with "%VM", return the absolute size as
+# a percentage of RAM and swap combined.  If no swap was available,
+# return as a percentage (tmpfs will use a percentage of RAM only).
+#
+tmpfs_size_vm ()
+{
+# Handle the no-swap case here, i.e. core memory only.  Also handle no
+# memory either (no proc) by just returning the original value.
+    RET="$1"
+    VMTOTAL="$(vm_size)"
+    VMPCT="${RET%\%VM}"
+    if [ "$VMPCT" != "$RET" ]; then
+	if [ -n "$VMTOTAL" ]; then
+	    RET=$(((VMTOTAL / 100) * VMPCT))
+	    RET="${RET}k"
+	else
+	    RET="${VMPCT}%"
+	fi
+    fi
+    echo "$RET"
+}
+
+# Free space on /tmp in kiB.
+tmp_free_space ()
+{
+    LC_ALL=C df -kP /tmp | grep -v Filesystem | sed -e 's;^[^[:space:]][^[:space:]]*[[:space:]][[:space:]]*[0-9][0-9]*[[:space:]][[:space:]]*[0-9][0-9]*[[:space:]][[:space:]]*\([0-9][0-9]*\)[[:space:]][[:space:]]*.*$;\1;'
+}
+
+# Check if an emergency tmpfs is needed
+need_overflow_tmp ()
+{
+    [ "$VERBOSE" != no ] && log_action_begin_msg "Checking minimum space in /tmp"
+
+    ROOT_FREE_SPACE=$(tmp_free_space)
+    [ "$VERBOSE" != no ] && log_action_end_msg 0
+    if [ -n "$ROOT_FREE_SPACE" ] && [ -n "$TMP_OVERFLOW_LIMIT" ] \
+	&& [ $((ROOT_FREE_SPACE < TMP_OVERFLOW_LIMIT)) = "1" ]; then
+	return 0
+    fi
+    return 1
+}
+
+# Set defaults for /etc/default/tmpfs, in case any options are
+# commented out which are needed for booting.  So that an empty or
+# outdated file missing newer options works correctly, set the default
+# values here.
+
+RAMLOCK=yes
+# These might be overridden by /etc/default/rcS
+if [ -z "$RAMSHM" ]; then RAMSHM=yes; fi
+if [ -z "$RAMTMP" ]; then RAMTMP=no; fi
+
+TMPFS_SIZE=20%VM
+TMPFS_MODE=755
+
+RUN_SIZE=10%
+RUN_MODE=755
+
+LOCK_SIZE=5242880 # 5MiB
+LOCK_MODE=1777
+
+SHM_SIZE=
+SHM_MODE=1777
+
+TMP_SIZE=
+TMP_MODE=1777
+TMP_OVERFLOW_LIMIT=1024
+
+# Source conffile
+if [ -f /etc/default/tmpfs ]; then
+    . /etc/default/tmpfs
+fi
+
+TMPFS_SIZE="$(tmpfs_size_vm "$TMPFS_SIZE")"
+RUN_SIZE="$(tmpfs_size_vm "$RUN_SIZE")"
+LOCK_SIZE="$(tmpfs_size_vm "$LOCK_SIZE")"
+SHM_SIZE="$(tmpfs_size_vm "$SHM_SIZE")"
+TMP_SIZE="$(tmpfs_size_vm "$TMP_SIZE")"
+
+RUN_OPT=
+[ "${RUN_SIZE:=$TMPFS_SIZE}" ] && RUN_OPT=",size=$RUN_SIZE"
+[ "${RUN_MODE:=$TMPFS_MODE}" ] && RUN_OPT="$RUN_OPT,mode=$RUN_MODE"
+
+LOCK_OPT=
+[ "${LOCK_SIZE:=$TMPFS_SIZE}" ] && LOCK_OPT=",size=$LOCK_SIZE"
+[ "${LOCK_MODE:=$TMPFS_MODE}" ] && LOCK_OPT="$LOCK_OPT,mode=$LOCK_MODE"
+
+SHM_OPT=
+[ "${SHM_SIZE:=$TMPFS_SIZE}" ] && SHM_OPT=",size=$SHM_SIZE"
+[ "${SHM_MODE:=$TMPFS_MODE}" ] && SHM_OPT="$SHM_OPT,mode=$SHM_MODE"
+
+TMP_OPT=
+[ "${TMP_SIZE:=$TMPFS_SIZE}" ] && TMP_OPT=",size=$TMP_SIZE"
+[ "${TMP_MODE:=$TMPFS_MODE}" ] && TMP_OPT="$TMP_OPT,mode=$TMP_MODE"
--- a/debian/changelog	2017-08-03 21:24:16.002732223 +0200
+++ b/debian/changelog	2017-08-03 21:24:05.778732142 +0200
@@ -1,3 +1,10 @@
+sysvinit (2.88dsf-ppa1) xenial; urgency=medium
+
+  * Re-instate init scripts in /lib/init; add /etc/init.d/rmnologin.
+  * Update NOTES.
+
+ -- gdm85 <gdm85@users.noreply.github.com>  Thu, 03 Aug 2017 21:23:16 +0200
+
 sysvinit (2.88dsf-59.3ubuntu2) xenial; urgency=medium
 
   * Revert Ubuntu delta about setting UTC in /etc/default/rcS instead of
